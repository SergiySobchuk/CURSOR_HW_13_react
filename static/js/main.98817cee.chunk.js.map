{"version":3,"sources":["albom/albom.view.js","albom/albom.controller.js","App.js","serviceWorker.js","index.js"],"names":["albom_view","Wrapper","styled","div","_templateObject","UserInfo","_templateObject2","Card","_templateObject3","LoadingImg","img","_templateObject4","Button","button","_templateObject5","Name","_templateObject6","CharacterAPI","Axios","create","baseURL","headers","Accept","Content-Type","Character","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","cardsOnPage","users","loading","loadingImage","loadPage","asyncToGenerator","regenerator_default","a","mark","_callee","response","wrap","_context","prev","next","get","concat","pageLoad","sent","setState","data","results","stop","prevPage","nextPage","_this2","react_default","createElement","src","alt","map","user","index","image","name","onClick","disabled","React","Component","App","albom_controller_Character","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"u4CAEe,IAAAA,EAAA,CACXC,QAASC,IAAOC,IAATC,KAIPC,SAAUH,IAAOC,IAATG,KAORC,KAAML,IAAOC,IAATK,KASJC,WAAYP,IAAOQ,IAATC,KAKVC,OAAQV,IAAOW,OAATC,KAMNC,KAAMb,IAAOC,IAATa,cC9BFC,SAAeC,EAAMC,OAAO,CAC9BC,QAAS,6CACTC,QAAS,CACLC,OAAQ,mBAAoBC,eAAgB,sBAI9BC,cAClB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAIVQ,MAAQ,CACJC,YAAaR,EAAKD,MAAMS,YACxBC,MAAO,GACPC,SAAS,GARMV,EAWnBW,aAAe,kBAXIX,EAiBnBY,SAjBmBX,OAAAY,EAAA,EAAAZ,CAAAa,EAAAC,EAAAC,KAiBR,SAAAC,IAAA,IAAAC,EAAA,OAAAJ,EAAAC,EAAAI,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACgB/B,EAAagC,IAAb,UAAAC,OAA2BxB,EAAKyB,WADhD,OACDP,EADCE,EAAAM,KAEP1B,EAAK2B,SAAS,CACVlB,MAAOS,EAASU,KAAKC,QACrBnB,SAAS,IAJN,wBAAAU,EAAAU,SAAAb,MAjBQjB,EAyBnB+B,SAAW,WACP/B,EAAK2B,SAAS,CACVjB,SAAQ,IAEZV,EAAKyB,WACLzB,EAAKY,YA9BUZ,EAiCnBgC,SAAW,WACPhC,EAAK2B,SAAS,CACVjB,SAAQ,IAEZV,EAAKyB,WACLzB,EAAKY,YApCLZ,EAAKyB,SAAW,EAFDzB,mFAcfG,KAAKS,4CA2BD,IAAAqB,EAAA9B,KACJ,OAAIA,KAAKI,MAAMG,QAyBPwB,EAAAnB,EAAAoB,cAAC7D,EAAMS,WAAP,CAAkBqD,IAAKjC,KAAKQ,aAAc0B,IAAI,YAvB9CH,EAAAnB,EAAAoB,cAAC7D,EAAMC,QAAP,KACI2D,EAAAnB,EAAAoB,cAAC7D,EAAMK,SAAP,KACKwB,KAAKI,MAAME,MAAM6B,IAAI,SAACC,EAAMC,GACzB,GAAIA,EAAQP,EAAK1B,MAAMC,YACnB,OACI0B,EAAAnB,EAAAoB,cAAC7D,EAAMO,KAAP,KAEIqD,EAAAnB,EAAAoB,cAAA,OAAKC,IAAKG,EAAKE,MAAOJ,IAAKE,EAAKG,OAChCR,EAAAnB,EAAAoB,cAAC7D,EAAMe,KAAP,KAAakD,EAAKG,UAOtCR,EAAAnB,EAAAoB,cAAA,WACID,EAAAnB,EAAAoB,cAAC7D,EAAMY,OAAP,CAAcyD,QAASxC,KAAK4B,SAAUa,SAA4B,IAAlBzC,KAAKsB,UAArD,QACAS,EAAAnB,EAAAoB,cAAC7D,EAAMY,OAAP,CAAcyD,QAASxC,KAAK6B,SAAUY,SAA4B,KAAlBzC,KAAKsB,UAArD,iBA9DgBoB,IAAMC,WCA/BC,MARf,WACE,OACEb,EAAAnB,EAAAoB,cAAA,WACED,EAAAnB,EAAAoB,cAACa,EAAD,CAAWxC,YAAa,MCMVyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOrB,EAAAnB,EAAAoB,cAACqB,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.98817cee.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport default {\r\n    Wrapper: styled.div`\r\n        padding: 10px;\r\n        margin: 5px;\r\n    `,\r\n    UserInfo: styled.div`\r\n        padding: 10px;\r\n        width: auto;\r\n        font-size: 15px;\r\n        display: flex;\r\n        flex-wrap: wrap;\r\n    `,\r\n    Card: styled.div`\r\n        background-color: #F8F8FF;\r\n        padding: 10px;\r\n        margin: 5px;\r\n        height: 375px;\r\n        width: 300px;\r\n        border-radius: 10px;\r\n        border: 1px solid #D3D3D3;\r\n    `,\r\n    LoadingImg: styled.img`\r\n        display: block;\r\n        margin: 0 auto;\r\n        width: auto;\r\n    `,\r\n    Button: styled.button`\r\n        margin: 5px;\r\n        cursor: pointer;\r\n        border-radius: 10px;\r\n        border: none;\r\n    `,\r\n    Name: styled.div`\r\n        font-size: 25px;\r\n        display: flex;\r\n        justify-content: center;\r\n        margin-top: 5px;\r\n        font-family: 'Indie Flower', cursive;\r\n        flex-wrap: wrap;\r\n    `\r\n}","import React from \"react\";\r\nimport Style from \"./albom.view\";\r\nimport Axios from \"axios\";\r\n\r\nconst CharacterAPI = Axios.create({\r\n    baseURL: \"https://rickandmortyapi.com/api/character/\",\r\n    headers: {\r\n        Accept: 'application/json', 'Content-Type': 'application/json'\r\n    }\r\n})\r\n\r\nexport  default class Character extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.pageLoad = 1;\r\n    }\r\n\r\n    state = {\r\n        cardsOnPage: this.props.cardsOnPage,\r\n        users: [],\r\n        loading: true\r\n    }\r\n\r\n    loadingImage = \"./img/giphy.gif\";\r\n\r\n    componentDidMount() {\r\n        this.loadPage();\r\n    }\r\n\r\n    loadPage = async() =>{\r\n        const response = await CharacterAPI.get(`/?page=${this.pageLoad}`);\r\n        this.setState({\r\n            users: response.data.results,\r\n            loading: false\r\n        })\r\n    }\r\n\r\n    prevPage = () =>{\r\n        this.setState({\r\n            loading:true\r\n        });\r\n        this.pageLoad--;\r\n        this.loadPage();\r\n    }\r\n\r\n    nextPage = () =>{\r\n        this.setState({\r\n            loading:true\r\n        });\r\n        this.pageLoad++;\r\n        this.loadPage();\r\n    }\r\n\r\n    render(){\r\n        if(!this.state.loading) {\r\n        return (\r\n                <Style.Wrapper>\r\n                    <Style.UserInfo>\r\n                        {this.state.users.map((user, index) => {\r\n                            if (index < this.state.cardsOnPage) {\r\n                                return (\r\n                                    <Style.Card>\r\n                                        {/*<div>ID: {user.id}</div>*/}\r\n                                        <img src={user.image} alt={user.name}/>\r\n                                        <Style.Name>{user.name}</Style.Name>\r\n                                    </Style.Card>\r\n                                )\r\n                            }\r\n                        })\r\n                        }\r\n                    </Style.UserInfo>\r\n                    <div>\r\n                        <Style.Button onClick={this.prevPage} disabled={this.pageLoad === 1}>PREV</Style.Button>\r\n                        <Style.Button onClick={this.nextPage} disabled={this.pageLoad === 25}>NEXT</Style.Button>\r\n                    </div>\r\n                </Style.Wrapper>\r\n        )\r\n        } else {\r\n            return(\r\n                <Style.LoadingImg src={this.loadingImage} alt=\"loading\"/>\r\n            )\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Character from \"./albom/albom.controller\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Character cardsOnPage={9}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}